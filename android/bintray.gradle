apply plugin: 'com.jfrog.bintray'

afterEvaluate { project ->
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
        options {
            encoding "UTF-8"
            charSet = 'UTF-8'
            author true
            version true
            links "http://docs.oracle.com/javase/7/docs/api/"
        }
        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}


version = VERSION

bintray {
    Properties properties = new Properties()
    def localPropertiesFile = project.rootProject.file('local.properties')

    def bintrayUser = ""
    def bintrayApiKey = ""

    if (!localPropertiesFile.exists()) {
        println "can't find ${localPropertiesFile.getAbsolutePath()} file to read bintray information."
    } else {
        properties.load(localPropertiesFile.newDataInputStream())

        bintrayUser = properties.getProperty("bintray.user")
        bintrayApiKey = properties.getProperty("bintray.apikey")
    }

    user = bintrayUser
    key = bintrayApiKey

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = ARTIFACTID
        desc = DESCRIPTION
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = VCS_URL
        licenses = ["Apache-2.0"]
        publish = true
        publicDownloadNumbers = true
    }
}
